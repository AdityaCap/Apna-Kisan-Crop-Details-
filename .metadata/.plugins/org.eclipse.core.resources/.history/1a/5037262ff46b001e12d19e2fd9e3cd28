package com.cropDetails.Service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cropDetails.Exceptions.CropAlreadyExistException;
import com.cropDetails.Exceptions.NoCropFoundException;
import com.cropDetails.Exceptions.NoCropRegisteredException;
import com.cropDetails.Exceptions.NoSubscriptionFoundException;
import com.cropDetails.Exceptions.SubscriptionAlreadyExistsException;
import com.cropDetails.Model.Crop;
import com.cropDetails.Model.CropSubscription;
import com.cropDetails.Repository.CropRepository;
import com.cropDetails.Repository.CropSubscriptionRepository;

@Service
public class CropServImpl implements ICropService {
	

	@Autowired
	CropRepository repo;
	@Autowired
	CropSubscriptionRepository  subscriptionRepository;
	@Override
	public List<Crop> viewAllCrops() throws NoCropFoundException{
		List<Crop> l=repo.findAll();
		if(l.isEmpty()) {
			throw new NoCropFoundException();
		}
		return l;
	}

	@Override
	public Optional<Crop> addCrop(Crop crop)throws CropAlreadyExistException {
		Optional<Crop> c=repo.findById(crop.getCId());
		if(c.isPresent()) {
			throw new CropAlreadyExistException();
		}
		return Optional.of(repo.save(crop));
	}

	@Override
	public Boolean deleteCropById(int id) throws NoCropRegisteredException{
		Optional<Crop> c=repo.findById(id);
		if(c.isEmpty()) {
			throw new NoCropRegisteredException();
		}
		repo.deleteById(id);
		return true;
	}

	@Override
	public Optional<Crop> updateCrop(Crop crop)throws NoCropRegisteredException {
		Optional<Crop> c=repo.findById(crop.getCId());
		if(c.isEmpty()) {
			throw new NoCropRegisteredException();
		}
		Crop cr=repo.save(crop);
		return Optional.of(cr);
	}

	@Override
	public Optional<Crop> getCropById(int id)throws NoCropRegisteredException {
		Optional<Crop> c=repo.findById(id);
		if(c.isEmpty()) {
			throw new NoCropRegisteredException();
		}
		return c;
	}

	@Override
	public Optional<Crop> getCropByName(String name) throws NoCropRegisteredException {
		Optional<Crop>c=repo.findByName(name);
		if(c.isEmpty()) {
			throw new NoCropRegisteredException();
		}
		return c;
	}

	@Override
	public Optional<List<Crop>> getCropByType(String type) throws NoCropRegisteredException {
		Optional<List<Crop>>c=repo.findByType(type);
		
		if(c.isEmpty()) {
			System.out.println(c);
			throw new NoCropRegisteredException();
		}
		return c;
	}

	public void subscribeToCrop(CropSubscription sub) throws SubscriptionAlreadyExistsException {
        // Check if the subscription already exists
        Optional<CropSubscription> existingSubscription = subscriptionRepository.findByDealerIdAndCropType(uId, cropType);
        if (existingSubscription.isPresent()) {
            throw new SubscriptionAlreadyExistsException();
        }

        // Create a new subscription
 

        // Save the subscription to the database
 
        subscriptionRepository.save(sub);
    }

	@Override
	public List<CropSubscription> getSubscription() throws NoSubscriptionFoundException {
		List<CropSubscription> l=subscriptionRepository.findAll();
		if(l.isEmpty()) {
			throw new NoSubscriptionFoundException();
		}
		return l;

}}
