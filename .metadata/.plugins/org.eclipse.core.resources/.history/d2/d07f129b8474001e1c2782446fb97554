package com.cropDetails.User.ExceptionHandler;

import java.time.LocalDate;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.cropDetails.User.Exceptions.InvoiceNotFoundException;
import com.cropDetails.User.Exceptions.InvoiceNotRegisteredException;
import com.cropDetails.User.Exceptions.NoDealersFoundException;
import com.cropDetails.User.Exceptions.NoFarmersFoundExceptions;
import com.cropDetails.User.Exceptions.NoUserFoundException;
import com.cropDetails.User.Exceptions.NotDealerException;
import com.cropDetails.User.Exceptions.ResourceAlreadyExistsException;
import com.cropDetails.User.Exceptions.ResourceNotFoundException;
import com.cropDetails.User.Exceptions.UserAlreadyExistsException;
import com.cropDetails.User.Exceptions.UserNotRegisteredException;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestControllerAdvice
public class UsersExceptionHandler extends ResponseEntityExceptionHandler {
	@ExceptionHandler(UserNotRegisteredException.class)
	public ResponseEntity<String> handleUserNotFoundException() {
		return new ResponseEntity<String>("User is not registered", HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(NoUserFoundException.class)
	public ResponseEntity<String> handleNoUserFoundException() {
		return new ResponseEntity<String>("No user is registered with us ,Please register first ",
				HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(UserAlreadyExistsException.class)
	public ResponseEntity<String> handleUserAlreadyExistsException() {
		return new ResponseEntity<String>("User already exists ", HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(NoFarmersFoundExceptions.class)
	public ResponseEntity<String> NoFarmersFoundException() {
		return new ResponseEntity<String>("No Farmers found !!", HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(NoDealersFoundException.class)
	public ResponseEntity<String> NoDealerFoundException() {
		return new ResponseEntity<String>("No Dealers found !!", HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(NotDealerException.class)
	public ResponseEntity<String> NotDealerException() {
		return new ResponseEntity<String>("User is found but not a dealer.", HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(ResourceAlreadyExistsException.class)
	public ResponseEntity<ExceptionResponse> handleResourceAlreadyExistException(ResourceAlreadyExistsException ex,
			WebRequest request) {
		ExceptionResponse exp = new ExceptionResponse(LocalDate.now(), ex.getMessage(), request.getDescription(false),
				"Already Exist");
		log.error("Resource is Already exist");
		return new ResponseEntity<ExceptionResponse>(exp, HttpStatus.NOT_ACCEPTABLE);
	}

	@Override

	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,

			HttpHeaders headers, HttpStatusCode status, WebRequest request) {

		StringBuilder details = new StringBuilder();

		for (FieldError error : ex.getBindingResult().getFieldErrors()) {

			details.append(error.getField()).append(": ").append(error.getDefaultMessage()).append(". ");

		}

		ExceptionResponse exceptionResponse = new ExceptionResponse(LocalDate.now(), "Validation fails",

				details.toString(), "Bad Request");

		log.error("Validation fails:", ex);

//        log.error(ex.getMessage());

		return new ResponseEntity<>(exceptionResponse, HttpStatus.BAD_REQUEST);

	}
	@ExceptionHandler(InvoiceNotFoundException.class)
	public ResponseEntity<String>handleInvoiceNotFoundException(){
		return new ResponseEntity<>("No invoices found ",HttpStatus.NOT_FOUND);
	}
	@ExceptionHandler(InvoiceNotRegisteredException.class)
	public ResponseEntity<String>handleInvoiceNotRegisteredException(){
		return new ResponseEntity<>("No invoices registered . Please do one ",HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<ExceptionResponse> handleCouponNotFoundException(ResourceNotFoundException ex, WebRequest request) {
		ExceptionResponse exceptionResponse = new ExceptionResponse(LocalDate.now(), ex.getMessage(),
				request.getDescription(false), "Not Found");
		log.error("Coupon not found!\n" + ex.getMessage());
		return new ResponseEntity<>(exceptionResponse, HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler(Exception.class)
	public ResponseEntity<ExceptionResponse> handleAllExceptions(Exception ex, WebRequest request) {
		ExceptionResponse exceptionResponse = new ExceptionResponse(LocalDate.now(), ex.getMessage(),
				request.getDescription(false), "Internal Server Error");
		log.error("An exception occurred:", ex);
//        log.error(ex.getMessage());
		return new ResponseEntity<>(exceptionResponse, HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
