package com.cropDetails.User.Service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cropDetails.User.Exceptions.NoUserFoundException;
import com.cropDetails.User.Exceptions.UserAlreadyExistsException;
import com.cropDetails.User.Exceptions.UserNotRegisteredException;
import com.cropDetails.User.Model.User;
import com.cropDetails.User.Repository.UserRepo;

@Service
public class UserServiceImpl implements IUserService{
	@Autowired
	UserRepo repo;

	@Override
	public Optional<User> addUser(User User)throws UserAlreadyExistsException {
		Optional<User> f=repo.findById(User.getUId());
		if(f.isPresent()) {
			throw new UserAlreadyExistsException();
		}
		User far=repo.save(User);
		return  Optional.of(far);
	}

	@Override
	public Optional<User> viewUserById(int id) throws UserNotRegisteredException  {
		Optional<User>f=repo.findById(id);
		if(f.isEmpty()) {
			throw new UserNotRegisteredException ();
		}
		
		return f;
	}

	

	@Override
	public List<User> viewAllUsers() throws NoUserFoundException {
		
		List<User> l=repo.findAll();
		if(l.isEmpty()) {
			throw new NoUserFoundException();
		}
		return l;
				
	}

	@Override
	public Optional<User> updateUser(User User)throws UserNotRegisteredException {
		Optional<User> f=repo.findById(User.getFId());
		if(f.isEmpty()) {
			throw new UserNotRegisteredException();
		}
		User far=repo.save(User);
		return Optional.of(far);
	}

	@Override
	public Boolean deleteUserById(int id) throws UserNotRegisteredException {
		Optional<User> f=repo.findById(id);
		if(f.isEmpty()) {
			throw new UserNotRegisteredException();
			
		}
		repo.deleteById(id);
		return true;
	}


	

	

}
