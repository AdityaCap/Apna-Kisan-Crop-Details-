package com.cropDetails.User.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cropDetails.User.Exceptions.NoFarmersFoundExceptions;
import com.cropDetails.User.Exceptions.NoUserFoundException;
import com.cropDetails.User.Exceptions.UserAlreadyExistsException;
import com.cropDetails.User.Exceptions.UserNotRegisteredException;
import com.cropDetails.User.Model.User;
import com.cropDetails.User.Service.IUserService;



@RestController
@RequestMapping("/user")
public class UserController {
	@Autowired
	IUserService ser;
	//Admin
	@PostMapping("/register")
	public ResponseEntity<User>registerUser(@RequestBody User user) throws UserAlreadyExistsException{
		Optional<User> f=ser.addUser(user);
		
		return new ResponseEntity<User>(f.get(),HttpStatus.OK);
		
	}
	//Admin
	@GetMapping("/all")
	public ResponseEntity<List<User>> viewAllUsers()throws NoUserFoundException{
		
		return new ResponseEntity<List<User>>(ser.viewAllUsers(), HttpStatus.OK);
	}
	//Admin
	@GetMapping("/viewById/{id}")
	public ResponseEntity<User>viewUserById(@PathVariable int id) throws UserNotRegisteredException {
		Optional<User> f=ser.viewUserById(id);
		return new ResponseEntity<User>(f.get(),HttpStatus.OK);
	}
	//Admin
	@DeleteMapping("/deleteById/{id}")
	public ResponseEntity<Boolean>deleteUserById(@PathVariable int id) throws UserNotRegisteredException {
		return new ResponseEntity<Boolean>(ser.deleteUserById(id),HttpStatus.OK);
	}
	//Farmer/Dealer or Admin
	@PutMapping("/update")
	public ResponseEntity<User>updateUser(@RequestBody User user)throws UserNotRegisteredException {
		Optional<User> f=ser.updateUser(user);
		return new ResponseEntity<User>(f.get(),HttpStatus.OK);
	}
	@GetMapping("/getByName/{name}")
	public ResponseEntity<User>getByName(@PathVariable String name) throws UserNotRegisteredException{
		Optional<User> u=ser.getByName(name);
		return new ResponseEntity<User>(u.get(),HttpStatus.OK);
		
	}
	@GetMapping("/getByMobile/{mobile}")
	public ResponseEntity<User>getByMobile(@PathVariable Long mobile) throws UserNotRegisteredException{
		Optional<User> u=ser.getByMobile(mobile);
		return new ResponseEntity<User>(u.get(),HttpStatus.OK);
		
	}
	@GetMapping("/getByEmail/{email}")
	public ResponseEntity<User>getByEmail(@PathVariable String email) throws UserNotRegisteredException{
		Optional<User> u=ser.getByEmail(email);
		return new ResponseEntity<User>(u.get(),HttpStatus.OK);
		
	}
	public ResponseEntity<User>getAllFarmer() throws NoFarmersFoundExceptions{
		
		Optional<User> u=ser.getAllFarmers();
		return new ResponseEntity<User>(u.get(),HttpStatus.OK);
	}
	
	
	

}
