package com.cropDetails.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cropDetails.Exceptions.CropAlreadyExistException;
import com.cropDetails.Exceptions.NoCropFoundException;
import com.cropDetails.Exceptions.NoCropRegisteredException;
import com.cropDetails.Exceptions.NoSubscriptionFoundException;
import com.cropDetails.Exceptions.NoUserFoundException;
import com.cropDetails.Exceptions.NotDealerException;
import com.cropDetails.Exceptions.SubscriptionAlreadyExistsException;
import com.cropDetails.Model.Crop;
import com.cropDetails.Model.CropSubscription;
import com.cropDetails.Service.ICropService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/crop")
public class CropController {
	@Autowired
	ICropService ser;
	
	
	@GetMapping("getAll")
	public ResponseEntity<List<Crop>>viewAllCrops()throws NoCropFoundException{
		
		return new ResponseEntity<List<Crop>>(ser.viewAllCrops(), HttpStatus.OK);

	}
	@PostMapping("/registerCrop")
	public ResponseEntity<Crop>addCrop(@Valid @RequestBody Crop crop) throws CropAlreadyExistException{
		Optional<Crop> c=ser.addCrop(crop);
		return new ResponseEntity<Crop>(c.get(),HttpStatus.OK);
		
	}
	@DeleteMapping("/deleteById/{id}")
	public ResponseEntity<Boolean>deleteCropById(@PathVariable int id) throws NoCropRegisteredException {
		return new ResponseEntity<Boolean>(ser.deleteCropById(id),HttpStatus.OK);
	}
	@PutMapping("/update")
	public ResponseEntity<Crop>updateCrop (@Valid @RequestBody Crop crop)throws NoCropRegisteredException {
		Optional<Crop> f=ser.updateCrop(crop);
		return new ResponseEntity<Crop>(f.get(),HttpStatus.OK);
	}
	@GetMapping("/getById/{id}")
	public ResponseEntity<Crop>getCropById(@PathVariable int id) throws NoCropRegisteredException{
		Optional<Crop> c=ser.getCropById(id);
		return new ResponseEntity<Crop>(c.get(),HttpStatus.OK);
	}
	@GetMapping("/getByName/{name}")
	public ResponseEntity<Crop>getCropByName(@PathVariable String name) throws NoCropRegisteredException{
		Optional<Crop> c=ser.getCropByName(name);
		return new ResponseEntity<Crop>(c.get(),HttpStatus.OK);
	}
	@GetMapping("/getByType/{type}")
	public ResponseEntity<List<Crop>>getCropByType(@PathVariable String type) throws NoCropRegisteredException{
		List<Crop> c=ser.getCropByType(type);
		return new ResponseEntity<List<Crop>>(c,HttpStatus.OK);
	}
	@PostMapping("/subscribe")
    public ResponseEntity<String> subscribeToCrop(@Valid @RequestBody CropSubscription request) throws SubscriptionAlreadyExistsException, NotDealerException {
        // Call the service to handle the subscription
        ser.subscribeToCrop(request);
        return ResponseEntity.ok("Subscription successful.");
    }
	@GetMapping("/getAllSubscriptions")
	public ResponseEntity<List<CropSubscription>>getSubscription()  throws NoSubscriptionFoundException{
		return new ResponseEntity<List<CropSubscription>>(ser.getSubscription(),HttpStatus.OK);
	}
	@DeleteMapping("deleteSubscriptionById/{id}")
	public ResponseEntity<Boolean>deleteSubscriptionById(@PathVariable int id) throws NoSubscriptionFoundException {
		return new ResponseEntity<Boolean>(ser.deleteSubscriptionById(id),HttpStatus.OK);
	}
	@GetMapping("/getAllCropsByUserId/{id}")
	public ResponseEntity<List<Crop>>getAllCropsByUserId(@PathVariable int uid)throws NoUserFoundException {
		return new ResponseEntity<List<Crop>>(ser.getAllCropsByUserId(uid),HttpStatus.OK);
		
	}
	
	
	

}
