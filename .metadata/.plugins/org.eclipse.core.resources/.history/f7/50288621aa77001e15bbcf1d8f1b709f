package com.cropDetails.User.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cropDetails.User.Dto.Invoice;
import com.cropDetails.User.Exceptions.InSufficentQuantityException;
import com.cropDetails.User.Exceptions.InvoiceNotFoundException;
import com.cropDetails.User.Exceptions.NoAdminFoundException;
import com.cropDetails.User.Exceptions.NoCropsFoundException;
import com.cropDetails.User.Exceptions.NoDealersFoundException;
import com.cropDetails.User.Exceptions.NoFarmersFoundExceptions;
import com.cropDetails.User.Exceptions.NoUserFoundException;
import com.cropDetails.User.Exceptions.NotDealerException;
import com.cropDetails.User.Exceptions.NotFarmerException;
import com.cropDetails.User.Exceptions.UserAlreadyExistsException;
import com.cropDetails.User.Exceptions.UserNotRegisteredException;
import com.cropDetails.User.Model.User;
import com.cropDetails.User.Service.IUserService;

import jakarta.validation.Valid;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/user")
public class UserController {
	@Autowired
	IUserService ser;

	// Admin

	@PostMapping("/register")
	public ResponseEntity<User> registerUser(@Valid @RequestBody User user) throws UserAlreadyExistsException {
		Optional<User> f = ser.addUser(user);
		return new ResponseEntity<User>(f.get(), HttpStatus.OK);

	}

	// Admin
	@PreAuthorize("hasAnyRole('ADMIN','DEALER')")
	@GetMapping("/all")
	public ResponseEntity<List<User>> viewAllUsers() throws NoUserFoundException {

		return new ResponseEntity<List<User>>(ser.viewAllUsers(), HttpStatus.OK);
	}

	// Admin
	//@PreAuthorize("hasAnyRole('DEALER','ADMIN')")
	@GetMapping("/viewById/{id}")
	public ResponseEntity<User> viewUserById(@PathVariable int id) throws UserNotRegisteredException {
		Optional<User> f = ser.viewUserById(id);
		return new ResponseEntity<User>(f.get(), HttpStatus.OK);
	}

	@PreAuthorize("hasAnyRole('DEALER','ADMIN','FARMER')")
	@GetMapping("/viewByEmail/{email}")
	public ResponseEntity<User> viewUserByEmail(@PathVariable String email) throws UserNotRegisteredException {
		Optional<User> f = ser.getByEmail(email);
		return new ResponseEntity<User>(f.get(), HttpStatus.OK);
	}

	// Admin
	@PreAuthorize("hasAnyRole('ADMIN')")
	@DeleteMapping("/deleteById/{id}")
	public ResponseEntity<Boolean> deleteUserById(@PathVariable int id) throws UserNotRegisteredException {
		return new ResponseEntity<Boolean>(ser.deleteUserById(id), HttpStatus.OK);
	}

	// Farmer/Dealer or Admin
	@PreAuthorize("hasAnyRole('DEALER','ADMIN','FARMER')")
	@PutMapping("/update")
	public ResponseEntity<User> updateUser(@RequestBody User user) throws UserNotRegisteredException {
		Optional<User> f = ser.updateUser(user);
		return new ResponseEntity<User>(f.get(), HttpStatus.OK);
	}

	@PreAuthorize("hasAnyRole('DEALER')")
	@GetMapping("/getByName/{name}")
	public ResponseEntity<User> getByName(@PathVariable String name) throws UserNotRegisteredException {
		Optional<User> u = ser.getByName(name);
		return new ResponseEntity<User>(u.get(), HttpStatus.OK);

	}

	@PreAuthorize("hasAnyRole('ADMIN')")
	@GetMapping("/getByMobile/{mobile}")
	public ResponseEntity<User> getByMobile(@PathVariable Long mobile) throws UserNotRegisteredException {
		Optional<User> u = ser.getByMobile(mobile);
		return new ResponseEntity<User>(u.get(), HttpStatus.OK);

	}

	@PreAuthorize("hasAnyRole('ADMIN','DEALER')")
	@GetMapping("/getByEmail/{email}")
	public ResponseEntity<User> getByEmail(@PathVariable String email) throws UserNotRegisteredException {
		Optional<User> u = ser.getByEmail(email);
		return new ResponseEntity<User>(u.get(), HttpStatus.OK);

	}

	@PreAuthorize("hasAnyRole('DEALER','ADMIN')")
	@GetMapping("/getAllFarmers")
	public ResponseEntity<List<User>> getAllFarmer() throws NoFarmersFoundExceptions, UserNotRegisteredException {

		Optional<List<User>> u = ser.getAllFarmers();
		return new ResponseEntity<List<User>>(u.get(), HttpStatus.OK);
	}

	@PreAuthorize("hasAnyRole('ADMIN')")
	@GetMapping("/getAllDealers")
	public ResponseEntity<List<User>> getAllDealers() throws NoDealersFoundException, UserNotRegisteredException {

		Optional<List<User>> u = ser.getAllDealers();
		return new ResponseEntity<List<User>>(u.get(), HttpStatus.OK);
	}

	@PreAuthorize("hasAnyRole('ADMIN')")
	@GetMapping("/getAllAdmins")
	public ResponseEntity<List<User>> getAllAdmins() throws NoAdminFoundException, UserNotRegisteredException {

		Optional<List<User>> u = ser.getAllAdmins();
		return new ResponseEntity<List<User>>(u.get(), HttpStatus.OK);
	}

	@GetMapping("isDealer/{id}")
	public ResponseEntity<Boolean> checkIsDealerById(@PathVariable int id)
			throws UserNotRegisteredException, NotDealerException {
		return new ResponseEntity<Boolean>(ser.checkIsDealerById(id), HttpStatus.OK);
	}

	@PreAuthorize("hasAnyRole('DEALER','ADMIN')")
	@PostMapping("/buy")
	public ResponseEntity<Invoice> createTicket(@RequestBody Invoice invoice)
			throws InSufficentQuantityException, NoCropsFoundException, NotFarmerException {

		return new ResponseEntity<Invoice>(ser.buyCrops(invoice).get(), HttpStatus.OK);
	}

	@PreAuthorize("hasAnyRole('DEALER','ADMIN')")
	@GetMapping("getInvoiceByDealerId/{id}")
	public ResponseEntity<List<Invoice>> getInvoices(@PathVariable int id)
			throws InvoiceNotFoundException, NoDealersFoundException, UserNotRegisteredException, NotDealerException {
		Optional<List<Invoice>> inv = ser.getInvoiceOfDealer(id);
		return new ResponseEntity<List<Invoice>>(inv.get(), HttpStatus.OK);
	}

}
